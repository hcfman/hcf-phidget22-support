/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class IRBase extends Phidget {

	IRBase(long handle) {
		super(handle);
	}

	public IRBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableCodeEvents(enable && codeListeners.size() > 0);
		enableLearnEvents(enable && learnListeners.size() > 0);
		enableRawDataEvents(enable && rawDataListeners.size() > 0);
	}

	public final void addCodeListener(IRCodeListener l) {
		synchronized(codeListeners) {
			codeListeners.add(l);
			enableCodeEvents(true);
		}
	}
	private List<IRCodeListener> codeListeners = new ArrayList<IRCodeListener>();
	private long nativeCodeHandler = 0;
	public final void removeCodeListener(IRCodeListener l) {
		synchronized(codeListeners) {
			codeListeners.remove(l);
			enableCodeEvents(codeListeners.size() > 0);
		}
	}
	private void fireCode(IRCodeEvent e) {
		synchronized(codeListeners) {
			for (Iterator it = codeListeners.iterator (); it.hasNext();)
			((IRCodeListener) it.next ()).onCode (e);
		}
	}
	private native void enableCodeEvents(boolean b);

	public final void addLearnListener(IRLearnListener l) {
		synchronized(learnListeners) {
			learnListeners.add(l);
			enableLearnEvents(true);
		}
	}
	private List<IRLearnListener> learnListeners = new ArrayList<IRLearnListener>();
	private long nativeLearnHandler = 0;
	public final void removeLearnListener(IRLearnListener l) {
		synchronized(learnListeners) {
			learnListeners.remove(l);
			enableLearnEvents(learnListeners.size() > 0);
		}
	}
	private void fireLearn(IRLearnEvent e) {
		synchronized(learnListeners) {
			for (Iterator it = learnListeners.iterator (); it.hasNext();)
			((IRLearnListener) it.next ()).onLearn (e);
		}
	}
	private native void enableLearnEvents(boolean b);

	public final void addRawDataListener(IRRawDataListener l) {
		synchronized(rawDataListeners) {
			rawDataListeners.add(l);
			enableRawDataEvents(true);
		}
	}
	private List<IRRawDataListener> rawDataListeners = new ArrayList<IRRawDataListener>();
	private long nativeRawDataHandler = 0;
	public final void removeRawDataListener(IRRawDataListener l) {
		synchronized(rawDataListeners) {
			rawDataListeners.remove(l);
			enableRawDataEvents(rawDataListeners.size() > 0);
		}
	}
	private void fireRawData(IRRawDataEvent e) {
		synchronized(rawDataListeners) {
			for (Iterator it = rawDataListeners.iterator (); it.hasNext();)
			((IRRawDataListener) it.next ()).onRawData (e);
		}
	}
	private native void enableRawDataEvents(boolean b);


	public native IRCode getLastCode() throws PhidgetException;
	public native IRLearnedCode getLastLearnedCode() throws PhidgetException;
	public native void transmit(java.lang.String code, IRCodeInfo codeInfo) throws PhidgetException;
	public native void transmitRaw(int[] data, int carrierFrequency, double dutyCycle, int gap) throws PhidgetException;
	public native void transmitRepeat() throws PhidgetException;

	public static final int RAW_DATA_LONG_SPACE = -1;

	public static final int MAX_CODE_BIT_COUNT = 128;

	public static final int MAX_CODE_STRING_LENGTH = 33;
}

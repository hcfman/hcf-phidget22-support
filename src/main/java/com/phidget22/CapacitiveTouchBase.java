/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class CapacitiveTouchBase extends Phidget {

	CapacitiveTouchBase(long handle) {
		super(handle);
	}

	public CapacitiveTouchBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableTouchEvents(enable && touchListeners.size() > 0);
		enableTouchEndEvents(enable && touchEndListeners.size() > 0);
	}

	public final void addTouchListener(CapacitiveTouchTouchListener l) {
		synchronized(touchListeners) {
			touchListeners.add(l);
			enableTouchEvents(true);
		}
	}
	private List<CapacitiveTouchTouchListener> touchListeners = new ArrayList<CapacitiveTouchTouchListener>();
	private long nativeTouchHandler = 0;
	public final void removeTouchListener(CapacitiveTouchTouchListener l) {
		synchronized(touchListeners) {
			touchListeners.remove(l);
			enableTouchEvents(touchListeners.size() > 0);
		}
	}
	private void fireTouch(CapacitiveTouchTouchEvent e) {
		synchronized(touchListeners) {
			for (Iterator it = touchListeners.iterator (); it.hasNext();)
			((CapacitiveTouchTouchListener) it.next ()).onTouch (e);
		}
	}
	private native void enableTouchEvents(boolean b);

	public final void addTouchEndListener(CapacitiveTouchTouchEndListener l) {
		synchronized(touchEndListeners) {
			touchEndListeners.add(l);
			enableTouchEndEvents(true);
		}
	}
	private List<CapacitiveTouchTouchEndListener> touchEndListeners = new ArrayList<CapacitiveTouchTouchEndListener>();
	private long nativeTouchEndHandler = 0;
	public final void removeTouchEndListener(CapacitiveTouchTouchEndListener l) {
		synchronized(touchEndListeners) {
			touchEndListeners.remove(l);
			enableTouchEndEvents(touchEndListeners.size() > 0);
		}
	}
	private void fireTouchEnd(CapacitiveTouchTouchEndEvent e) {
		synchronized(touchEndListeners) {
			for (Iterator it = touchEndListeners.iterator (); it.hasNext();)
			((CapacitiveTouchTouchEndListener) it.next ()).onTouchEnd (e);
		}
	}
	private native void enableTouchEndEvents(boolean b);


	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native boolean getIsTouched() throws PhidgetException;
	public native double getSensitivity() throws PhidgetException;
	public native void setSensitivity(double Sensitivity) throws PhidgetException;
	public native double getMinSensitivity() throws PhidgetException;
	public native double getMaxSensitivity() throws PhidgetException;
	public native double getTouchValue() throws PhidgetException;
	public native double getMinTouchValue() throws PhidgetException;
	public native double getMaxTouchValue() throws PhidgetException;
	public native double getTouchValueChangeTrigger() throws PhidgetException;
	public native void setTouchValueChangeTrigger(double TouchValueChangeTrigger) throws PhidgetException;
	public native double getMinTouchValueChangeTrigger() throws PhidgetException;
	public native double getMaxTouchValueChangeTrigger() throws PhidgetException;
}

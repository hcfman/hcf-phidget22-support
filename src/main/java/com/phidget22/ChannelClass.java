/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;

public enum ChannelClass {
	ACCELEROMETER(1) {
		public String getMessage() {
			return ("PhidgetAccelerometer");
		}
	},
	CURRENT_INPUT(2) {
		public String getMessage() {
			return ("PhidgetCurrentInput");
		}
	},
	DC_MOTOR(4) {
		public String getMessage() {
			return ("PhidgetDCMotor");
		}
	},
	DIGITAL_INPUT(5) {
		public String getMessage() {
			return ("PhidgetDigitalInput");
		}
	},
	DIGITAL_OUTPUT(6) {
		public String getMessage() {
			return ("PhidgetDigitalOutput");
		}
	},
	DISTANCE_SENSOR(7) {
		public String getMessage() {
			return ("PhidgetDistanceSensor");
		}
	},
	ENCODER(8) {
		public String getMessage() {
			return ("PhidgetEncoder");
		}
	},
	FREQUENCY_COUNTER(9) {
		public String getMessage() {
			return ("PhidgetFrequencyCounter");
		}
	},
	GPS(10) {
		public String getMessage() {
			return ("PhidgetGPS");
		}
	},
	LCD(11) {
		public String getMessage() {
			return ("PhidgetLCD");
		}
	},
	GYROSCOPE(12) {
		public String getMessage() {
			return ("PhidgetGyroscope");
		}
	},
	HUB(13) {
		public String getMessage() {
			return ("PhidgetHub");
		}
	},
	CAPACITIVE_TOUCH(14) {
		public String getMessage() {
			return ("PhidgetCapacitiveTouch");
		}
	},
	HUMIDITY_SENSOR(15) {
		public String getMessage() {
			return ("PhidgetHumiditySensor");
		}
	},
	IR(16) {
		public String getMessage() {
			return ("PhidgetIR");
		}
	},
	LIGHT_SENSOR(17) {
		public String getMessage() {
			return ("PhidgetLightSensor");
		}
	},
	MAGNETOMETER(18) {
		public String getMessage() {
			return ("PhidgetMagnetometer");
		}
	},
	PHSENSOR(37) {
		public String getMessage() {
			return ("PhidgetPHSensor");
		}
	},
	POWER_GUARD(20) {
		public String getMessage() {
			return ("PhidgetPowerGuard");
		}
	},
	PRESSURE_SENSOR(21) {
		public String getMessage() {
			return ("PhidgetPressureSensor");
		}
	},
	RC_SERVO(22) {
		public String getMessage() {
			return ("PhidgetRCServo");
		}
	},
	RESISTANCE_INPUT(23) {
		public String getMessage() {
			return ("PhidgetResistanceInput");
		}
	},
	RFID(24) {
		public String getMessage() {
			return ("PhidgetRFID");
		}
	},
	SOUND_SENSOR(25) {
		public String getMessage() {
			return ("PhidgetSoundSensor");
		}
	},
	SPATIAL(26) {
		public String getMessage() {
			return ("PhidgetSpatial");
		}
	},
	STEPPER(27) {
		public String getMessage() {
			return ("PhidgetStepper");
		}
	},
	TEMPERATURE_SENSOR(28) {
		public String getMessage() {
			return ("PhidgetTemperatureSensor");
		}
	},
	VOLTAGE_INPUT(29) {
		public String getMessage() {
			return ("PhidgetVoltageInput");
		}
	},
	VOLTAGE_OUTPUT(30) {
		public String getMessage() {
			return ("PhidgetVoltageOutput");
		}
	},
	VOLTAGE_RATIO_INPUT(31) {
		public String getMessage() {
			return ("PhidgetVoltageRatioInput");
		}
	},
	MOTOR_POSITION_CONTROLLER(34) {
		public String getMessage() {
			return ("PhidgetMotorPositionController");
		}
	},
	BLDC_MOTOR(35) {
		public String getMessage() {
			return ("PhidgetBLDCMotor");
		}
	},
	DICTIONARY(36) {
		public String getMessage() {
			return ("PhidgetDictionary");
		}
	};

	public static ChannelClass getEnum(int code) {
		switch(code) {
		case 1:
			return ACCELEROMETER;
		case 2:
			return CURRENT_INPUT;
		case 4:
			return DC_MOTOR;
		case 5:
			return DIGITAL_INPUT;
		case 6:
			return DIGITAL_OUTPUT;
		case 7:
			return DISTANCE_SENSOR;
		case 8:
			return ENCODER;
		case 9:
			return FREQUENCY_COUNTER;
		case 10:
			return GPS;
		case 11:
			return LCD;
		case 12:
			return GYROSCOPE;
		case 13:
			return HUB;
		case 14:
			return CAPACITIVE_TOUCH;
		case 15:
			return HUMIDITY_SENSOR;
		case 16:
			return IR;
		case 17:
			return LIGHT_SENSOR;
		case 18:
			return MAGNETOMETER;
		case 37:
			return PHSENSOR;
		case 20:
			return POWER_GUARD;
		case 21:
			return PRESSURE_SENSOR;
		case 22:
			return RC_SERVO;
		case 23:
			return RESISTANCE_INPUT;
		case 24:
			return RFID;
		case 25:
			return SOUND_SENSOR;
		case 26:
			return SPATIAL;
		case 27:
			return STEPPER;
		case 28:
			return TEMPERATURE_SENSOR;
		case 29:
			return VOLTAGE_INPUT;
		case 30:
			return VOLTAGE_OUTPUT;
		case 31:
			return VOLTAGE_RATIO_INPUT;
		case 34:
			return MOTOR_POSITION_CONTROLLER;
		case 35:
			return BLDC_MOTOR;
		case 36:
			return DICTIONARY;
		}
		return null;
	}

	private final int code;
	private ChannelClass(int code) {
		this.code = code;
	}

	public int getCode() {
		return (code);
	}

	public abstract String getMessage();
}

/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;

public enum ChannelSubclass {
	NONE(1) {
		public String getMessage() {
			return ("No subclass");
		}
	},
	DIGITAL_OUTPUT_DUTY_CYCLE(16) {
		public String getMessage() {
			return ("Digital output duty cycle");
		}
	},
	DIGITAL_OUTPUT_LEDDRIVER(17) {
		public String getMessage() {
			return ("Digital output LED driver");
		}
	},
	TEMPERATURE_SENSOR_RTD(32) {
		public String getMessage() {
			return ("Temperature sensor RTD");
		}
	},
	TEMPERATURE_SENSOR_THERMOCOUPLE(33) {
		public String getMessage() {
			return ("Temperature sensor thermocouple");
		}
	},
	VOLTAGE_INPUT_SENSOR_PORT(48) {
		public String getMessage() {
			return ("Voltage sensor port");
		}
	},
	VOLTAGE_RATIO_INPUT_SENSOR_PORT(64) {
		public String getMessage() {
			return ("Voltage ratio sensor port");
		}
	},
	VOLTAGE_RATIO_INPUT_BRIDGE(65) {
		public String getMessage() {
			return ("Voltage ratio bridge input");
		}
	},
	LCD_GRAPHIC(80) {
		public String getMessage() {
			return ("Graphic LCD");
		}
	},
	LCD_TEXT(81) {
		public String getMessage() {
			return ("Text LCD");
		}
	},
	ENCODER_MODE_SETTABLE(96) {
		public String getMessage() {
			return ("Encoder IO mode settable");
		}
	},
	RCSERVO_EMBEDDED(112) {
		public String getMessage() {
			return ("RC Servo Embedded");
		}
	};

	public static ChannelSubclass getEnum(int code) {
		switch(code) {
		case 1:
			return NONE;
		case 16:
			return DIGITAL_OUTPUT_DUTY_CYCLE;
		case 17:
			return DIGITAL_OUTPUT_LEDDRIVER;
		case 32:
			return TEMPERATURE_SENSOR_RTD;
		case 33:
			return TEMPERATURE_SENSOR_THERMOCOUPLE;
		case 48:
			return VOLTAGE_INPUT_SENSOR_PORT;
		case 64:
			return VOLTAGE_RATIO_INPUT_SENSOR_PORT;
		case 65:
			return VOLTAGE_RATIO_INPUT_BRIDGE;
		case 80:
			return LCD_GRAPHIC;
		case 81:
			return LCD_TEXT;
		case 96:
			return ENCODER_MODE_SETTABLE;
		case 112:
			return RCSERVO_EMBEDDED;
		}
		return null;
	}

	private final int code;
	private ChannelSubclass(int code) {
		this.code = code;
	}

	public int getCode() {
		return (code);
	}

	public abstract String getMessage();
}

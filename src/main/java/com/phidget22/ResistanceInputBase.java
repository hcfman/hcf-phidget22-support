/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class ResistanceInputBase extends Phidget {

	ResistanceInputBase(long handle) {
		super(handle);
	}

	public ResistanceInputBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableResistanceChangeEvents(enable && resistanceChangeListeners.size() > 0);
	}

	public final void addResistanceChangeListener(ResistanceInputResistanceChangeListener l) {
		synchronized(resistanceChangeListeners) {
			resistanceChangeListeners.add(l);
			enableResistanceChangeEvents(true);
		}
	}
	private List<ResistanceInputResistanceChangeListener> resistanceChangeListeners = new ArrayList<ResistanceInputResistanceChangeListener>();
	private long nativeResistanceChangeHandler = 0;
	public final void removeResistanceChangeListener(ResistanceInputResistanceChangeListener l) {
		synchronized(resistanceChangeListeners) {
			resistanceChangeListeners.remove(l);
			enableResistanceChangeEvents(resistanceChangeListeners.size() > 0);
		}
	}
	private void fireResistanceChange(ResistanceInputResistanceChangeEvent e) {
		synchronized(resistanceChangeListeners) {
			for (Iterator it = resistanceChangeListeners.iterator (); it.hasNext();)
			((ResistanceInputResistanceChangeListener) it.next ()).onResistanceChange (e);
		}
	}
	private native void enableResistanceChangeEvents(boolean b);


	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native double getResistance() throws PhidgetException;
	public native double getMinResistance() throws PhidgetException;
	public native double getMaxResistance() throws PhidgetException;
	public native double getResistanceChangeTrigger() throws PhidgetException;
	public native void setResistanceChangeTrigger(double ResistanceChangeTrigger) throws PhidgetException;
	public native double getMinResistanceChangeTrigger() throws PhidgetException;
	public native double getMaxResistanceChangeTrigger() throws PhidgetException;
	public native RTDWireSetup getRTDWireSetup() throws PhidgetException;
	public native void setRTDWireSetup(RTDWireSetup RTDWireSetup) throws PhidgetException;
}

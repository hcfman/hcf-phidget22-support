/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;

public enum DeviceClass {
	ACCELEROMETER(1) {
		public String getMessage() {
			return ("PhidgetAccelerometer");
		}
	},
	ADVANCED_SERVO(2) {
		public String getMessage() {
			return ("PhidgetAdvancedServo");
		}
	},
	ANALOG(3) {
		public String getMessage() {
			return ("PhidgetAnalog");
		}
	},
	BRIDGE(4) {
		public String getMessage() {
			return ("PhidgetBridge");
		}
	},
	ENCODER(5) {
		public String getMessage() {
			return ("PhidgetEncoder");
		}
	},
	FREQUENCY_COUNTER(6) {
		public String getMessage() {
			return ("PhidgetFrequencyCounter");
		}
	},
	GPS(7) {
		public String getMessage() {
			return ("PhidgetGPS");
		}
	},
	HUB(8) {
		public String getMessage() {
			return ("PhidgetHub");
		}
	},
	INTERFACE_KIT(9) {
		public String getMessage() {
			return ("PhidgetInterfaceKit");
		}
	},
	IR(10) {
		public String getMessage() {
			return ("PhidgetIR");
		}
	},
	LED(11) {
		public String getMessage() {
			return ("PhidgetLED");
		}
	},
	MOTOR_CONTROL(13) {
		public String getMessage() {
			return ("PhidgetMotorControl");
		}
	},
	PH_SENSOR(14) {
		public String getMessage() {
			return ("PhidgetPHSensor");
		}
	},
	RFID(15) {
		public String getMessage() {
			return ("PhidgetRFID");
		}
	},
	SERVO(16) {
		public String getMessage() {
			return ("PhidgetServo");
		}
	},
	SPATIAL(17) {
		public String getMessage() {
			return ("PhidgetSpatial");
		}
	},
	STEPPER(18) {
		public String getMessage() {
			return ("PhidgetStepper");
		}
	},
	TEMPERATURE_SENSOR(19) {
		public String getMessage() {
			return ("PhidgetTemperatureSensor");
		}
	},
	TEXT_LCD(20) {
		public String getMessage() {
			return ("PhidgetTextLCD");
		}
	},
	VINT(21) {
		public String getMessage() {
			return ("PhidgetVINT");
		}
	},
	DICTIONARY(24) {
		public String getMessage() {
			return ("PhidgetDictionary");
		}
	};

	public static DeviceClass getEnum(int code) {
		switch(code) {
		case 1:
			return ACCELEROMETER;
		case 2:
			return ADVANCED_SERVO;
		case 3:
			return ANALOG;
		case 4:
			return BRIDGE;
		case 5:
			return ENCODER;
		case 6:
			return FREQUENCY_COUNTER;
		case 7:
			return GPS;
		case 8:
			return HUB;
		case 9:
			return INTERFACE_KIT;
		case 10:
			return IR;
		case 11:
			return LED;
		case 13:
			return MOTOR_CONTROL;
		case 14:
			return PH_SENSOR;
		case 15:
			return RFID;
		case 16:
			return SERVO;
		case 17:
			return SPATIAL;
		case 18:
			return STEPPER;
		case 19:
			return TEMPERATURE_SENSOR;
		case 20:
			return TEXT_LCD;
		case 21:
			return VINT;
		case 24:
			return DICTIONARY;
		}
		return null;
	}

	private final int code;
	private DeviceClass(int code) {
		this.code = code;
	}

	public int getCode() {
		return (code);
	}

	public abstract String getMessage();
}

/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;

public enum Unit {
	NONE(0) {
		public String getMessage() {
			return ("Unitless");
		}
	},
	BOOLEAN(1) {
		public String getMessage() {
			return ("Boolean");
		}
	},
	PERCENT(2) {
		public String getMessage() {
			return ("Percent");
		}
	},
	DECIBEL(3) {
		public String getMessage() {
			return ("Decibel");
		}
	},
	MILLIMETER(4) {
		public String getMessage() {
			return ("Millimeter");
		}
	},
	CENTIMETER(5) {
		public String getMessage() {
			return ("Centimeter");
		}
	},
	METER(6) {
		public String getMessage() {
			return ("Meter");
		}
	},
	GRAM(7) {
		public String getMessage() {
			return ("Gram");
		}
	},
	KILOGRAM(8) {
		public String getMessage() {
			return ("Kilogram");
		}
	},
	MILLIAMPERE(9) {
		public String getMessage() {
			return ("Milliampere");
		}
	},
	AMPERE(10) {
		public String getMessage() {
			return ("Ampere");
		}
	},
	KILOPASCAL(11) {
		public String getMessage() {
			return ("Kilopascal");
		}
	},
	VOLT(12) {
		public String getMessage() {
			return ("Volt");
		}
	},
	DEGREE_CELCIUS(13) {
		public String getMessage() {
			return ("Degree Celcius");
		}
	},
	LUX(14) {
		public String getMessage() {
			return ("Lux");
		}
	},
	GAUSS(15) {
		public String getMessage() {
			return ("Gauss");
		}
	},
	P_H(16) {
		public String getMessage() {
			return ("pH");
		}
	},
	WATT(17) {
		public String getMessage() {
			return ("Watt");
		}
	};

	public static Unit getEnum(int code) {
		switch(code) {
		case 0:
			return NONE;
		case 1:
			return BOOLEAN;
		case 2:
			return PERCENT;
		case 3:
			return DECIBEL;
		case 4:
			return MILLIMETER;
		case 5:
			return CENTIMETER;
		case 6:
			return METER;
		case 7:
			return GRAM;
		case 8:
			return KILOGRAM;
		case 9:
			return MILLIAMPERE;
		case 10:
			return AMPERE;
		case 11:
			return KILOPASCAL;
		case 12:
			return VOLT;
		case 13:
			return DEGREE_CELCIUS;
		case 14:
			return LUX;
		case 15:
			return GAUSS;
		case 16:
			return P_H;
		case 17:
			return WATT;
		}
		return null;
	}

	private final int code;
	private Unit(int code) {
		this.code = code;
	}

	public int getCode() {
		return (code);
	}

	public abstract String getMessage();
}

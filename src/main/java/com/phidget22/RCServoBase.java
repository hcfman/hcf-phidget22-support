/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class RCServoBase extends Phidget {

	RCServoBase(long handle) {
		super(handle);
	}

	public RCServoBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enablePositionChangeEvents(enable && positionChangeListeners.size() > 0);
		enableTargetPositionReachedEvents(enable && targetPositionReachedListeners.size() > 0);
		enableVelocityChangeEvents(enable && velocityChangeListeners.size() > 0);
	}

	public final void addPositionChangeListener(RCServoPositionChangeListener l) {
		synchronized(positionChangeListeners) {
			positionChangeListeners.add(l);
			enablePositionChangeEvents(true);
		}
	}
	private List<RCServoPositionChangeListener> positionChangeListeners = new ArrayList<RCServoPositionChangeListener>();
	private long nativePositionChangeHandler = 0;
	public final void removePositionChangeListener(RCServoPositionChangeListener l) {
		synchronized(positionChangeListeners) {
			positionChangeListeners.remove(l);
			enablePositionChangeEvents(positionChangeListeners.size() > 0);
		}
	}
	private void firePositionChange(RCServoPositionChangeEvent e) {
		synchronized(positionChangeListeners) {
			for (Iterator it = positionChangeListeners.iterator (); it.hasNext();)
			((RCServoPositionChangeListener) it.next ()).onPositionChange (e);
		}
	}
	private native void enablePositionChangeEvents(boolean b);

	public final void addTargetPositionReachedListener(RCServoTargetPositionReachedListener l) {
		synchronized(targetPositionReachedListeners) {
			targetPositionReachedListeners.add(l);
			enableTargetPositionReachedEvents(true);
		}
	}
	private List<RCServoTargetPositionReachedListener> targetPositionReachedListeners = new ArrayList<RCServoTargetPositionReachedListener>();
	private long nativeTargetPositionReachedHandler = 0;
	public final void removeTargetPositionReachedListener(RCServoTargetPositionReachedListener l) {
		synchronized(targetPositionReachedListeners) {
			targetPositionReachedListeners.remove(l);
			enableTargetPositionReachedEvents(targetPositionReachedListeners.size() > 0);
		}
	}
	private void fireTargetPositionReached(RCServoTargetPositionReachedEvent e) {
		synchronized(targetPositionReachedListeners) {
			for (Iterator it = targetPositionReachedListeners.iterator (); it.hasNext();)
			((RCServoTargetPositionReachedListener) it.next ()).onTargetPositionReached (e);
		}
	}
	private native void enableTargetPositionReachedEvents(boolean b);

	public final void addVelocityChangeListener(RCServoVelocityChangeListener l) {
		synchronized(velocityChangeListeners) {
			velocityChangeListeners.add(l);
			enableVelocityChangeEvents(true);
		}
	}
	private List<RCServoVelocityChangeListener> velocityChangeListeners = new ArrayList<RCServoVelocityChangeListener>();
	private long nativeVelocityChangeHandler = 0;
	public final void removeVelocityChangeListener(RCServoVelocityChangeListener l) {
		synchronized(velocityChangeListeners) {
			velocityChangeListeners.remove(l);
			enableVelocityChangeEvents(velocityChangeListeners.size() > 0);
		}
	}
	private void fireVelocityChange(RCServoVelocityChangeEvent e) {
		synchronized(velocityChangeListeners) {
			for (Iterator it = velocityChangeListeners.iterator (); it.hasNext();)
			((RCServoVelocityChangeListener) it.next ()).onVelocityChange (e);
		}
	}
	private native void enableVelocityChangeEvents(boolean b);


	public native double getAcceleration() throws PhidgetException;
	public native void setAcceleration(double Acceleration) throws PhidgetException;
	public native double getMinAcceleration() throws PhidgetException;
	public native double getMaxAcceleration() throws PhidgetException;
	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native boolean getEngaged() throws PhidgetException;
	public native void setEngaged(boolean Engaged) throws PhidgetException;
	public native boolean getIsMoving() throws PhidgetException;
	public native double getPosition() throws PhidgetException;
	public native double getMinPosition() throws PhidgetException;
	public native void setMinPosition(double MinPosition) throws PhidgetException;
	public native void setMaxPosition(double MaxPosition) throws PhidgetException;
	public native double getMaxPosition() throws PhidgetException;
	public native void setMinPulseWidth(double MinPulseWidth) throws PhidgetException;
	public native double getMinPulseWidth() throws PhidgetException;
	public native void setMaxPulseWidth(double MaxPulseWidth) throws PhidgetException;
	public native double getMaxPulseWidth() throws PhidgetException;
	public native double getMinPulseWidthLimit() throws PhidgetException;
	public native double getMaxPulseWidthLimit() throws PhidgetException;
	public native boolean getSpeedRampingState() throws PhidgetException;
	public native void setSpeedRampingState(boolean SpeedRampingState) throws PhidgetException;
	public native double getTargetPosition() throws PhidgetException;
	public native void setTargetPosition(double TargetPosition) throws PhidgetException;
	public native void setTargetPosition(double TargetPosition, AsyncListener asyncHandler);
	public native double getTorque() throws PhidgetException;
	public native void setTorque(double Torque) throws PhidgetException;
	public native double getMinTorque() throws PhidgetException;
	public native double getMaxTorque() throws PhidgetException;
	public native double getVelocity() throws PhidgetException;
	public native double getVelocityLimit() throws PhidgetException;
	public native void setVelocityLimit(double VelocityLimit) throws PhidgetException;
	public native double getMinVelocityLimit() throws PhidgetException;
	public native double getMaxVelocityLimit() throws PhidgetException;
	public native RCServoVoltage getVoltage() throws PhidgetException;
	public native void setVoltage(RCServoVoltage Voltage) throws PhidgetException;
}

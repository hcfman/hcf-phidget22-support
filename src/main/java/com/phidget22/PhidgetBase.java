/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class PhidgetBase {
	static {
		try {
			System.loadLibrary("phidget22java");
		} catch (UnsatisfiedLinkError ex) {
			String os = System.getProperty("os.name");
			if (os.startsWith("Linux")) {
				throw new ExceptionInInitializerError(ex.getMessage()
				+ "\nCould not locate the Phidget C library (libphidget22java.so)."
				+ "\nMake sure it is installed, and add it' s path to LD_LIBRARY_PATH.");
			}
			else if (os.startsWith("Windows")) {
				throw new ExceptionInInitializerError(ex.getMessage()
				+ "\nCould not locate the Phidget C library."
				+ "\nThe Windows Phidget22 MSI must be installed.");
			}
			else if (os.startsWith("Mac")) {
				throw new ExceptionInInitializerError(ex.getMessage()
				+ "\nCould not locate the Phidget C library."
				+ "\nThe Mac Phidget22 DMG must be installed.");
			}
			else {
				throw new ExceptionInInitializerError(ex.getMessage()
				+ "\nCould not locate the Phidget C library.");
			}
		}
	}

	long handle;

	PhidgetBase(long handle) {
		this.handle = handle;
	}

	public PhidgetBase() throws PhidgetException { }


	private final void setEvents(boolean enable) {
		enableAttachEvents(enable && attachListeners.size() > 0);
		enableDetachEvents(enable && detachListeners.size() > 0);
		enableErrorEvents(enable && errorListeners.size() > 0);
		enablePropertyChangeEvents(enable && propertyChangeListeners.size() > 0);
	}

	public final void addAttachListener(AttachListener l) {
		synchronized(attachListeners) {
			attachListeners.add(l);
			enableAttachEvents(true);
		}
	}
	private List<AttachListener> attachListeners = new ArrayList<AttachListener>();
	private long nativeAttachHandler = 0;
	public final void removeAttachListener(AttachListener l) {
		synchronized(attachListeners) {
			attachListeners.remove(l);
			enableAttachEvents(attachListeners.size() > 0);
		}
	}
	private void fireAttach(AttachEvent e) {
		synchronized(attachListeners) {
			for (Iterator it = attachListeners.iterator (); it.hasNext();)
			((AttachListener) it.next ()).onAttach (e);
		}
	}
	private native void enableAttachEvents(boolean b);

	public final void addDetachListener(DetachListener l) {
		synchronized(detachListeners) {
			detachListeners.add(l);
			enableDetachEvents(true);
		}
	}
	private List<DetachListener> detachListeners = new ArrayList<DetachListener>();
	private long nativeDetachHandler = 0;
	public final void removeDetachListener(DetachListener l) {
		synchronized(detachListeners) {
			detachListeners.remove(l);
			enableDetachEvents(detachListeners.size() > 0);
		}
	}
	private void fireDetach(DetachEvent e) {
		synchronized(detachListeners) {
			for (Iterator it = detachListeners.iterator (); it.hasNext();)
			((DetachListener) it.next ()).onDetach (e);
		}
	}
	private native void enableDetachEvents(boolean b);

	public final void addErrorListener(ErrorListener l) {
		synchronized(errorListeners) {
			errorListeners.add(l);
			enableErrorEvents(true);
		}
	}
	private List<ErrorListener> errorListeners = new ArrayList<ErrorListener>();
	private long nativeErrorHandler = 0;
	public final void removeErrorListener(ErrorListener l) {
		synchronized(errorListeners) {
			errorListeners.remove(l);
			enableErrorEvents(errorListeners.size() > 0);
		}
	}
	private void fireError(ErrorEvent e) {
		synchronized(errorListeners) {
			for (Iterator it = errorListeners.iterator (); it.hasNext();)
			((ErrorListener) it.next ()).onError (e);
		}
	}
	private native void enableErrorEvents(boolean b);

	public final void addPropertyChangeListener(PropertyChangeListener l) {
		synchronized(propertyChangeListeners) {
			propertyChangeListeners.add(l);
			enablePropertyChangeEvents(true);
		}
	}
	private List<PropertyChangeListener> propertyChangeListeners = new ArrayList<PropertyChangeListener>();
	private long nativePropertyChangeHandler = 0;
	public final void removePropertyChangeListener(PropertyChangeListener l) {
		synchronized(propertyChangeListeners) {
			propertyChangeListeners.remove(l);
			enablePropertyChangeEvents(propertyChangeListeners.size() > 0);
		}
	}
	private void firePropertyChange(PropertyChangeEvent e) {
		synchronized(propertyChangeListeners) {
			for (Iterator it = propertyChangeListeners.iterator (); it.hasNext();)
			((PropertyChangeListener) it.next ()).onPropertyChange (e);
		}
	}
	private native void enablePropertyChangeEvents(boolean b);


	public static native void finalize(int flags) throws PhidgetException;
	public static native java.lang.String getLibraryVersion() throws PhidgetException;
	public native boolean getAttached() throws PhidgetException;
	public native int getChannel() throws PhidgetException;
	public native void setChannel(int Channel) throws PhidgetException;
	public native ChannelClass getChannelClass() throws PhidgetException;
	public native java.lang.String getChannelClassName() throws PhidgetException;
	public native java.lang.String getChannelName() throws PhidgetException;
	public native ChannelSubclass getChannelSubclass() throws PhidgetException;
	public native void close() throws PhidgetException;
	public native int getDeviceChannelCount(ChannelClass cls) throws PhidgetException;
	public native DeviceClass getDeviceClass() throws PhidgetException;
	public native java.lang.String getDeviceClassName() throws PhidgetException;
	public native DeviceID getDeviceID() throws PhidgetException;
	public native java.lang.String getDeviceLabel() throws PhidgetException;
	public native void setDeviceLabel(java.lang.String DeviceLabel) throws PhidgetException;
	public native java.lang.String getDeviceName() throws PhidgetException;
	public native int getDeviceSerialNumber() throws PhidgetException;
	public native void setDeviceSerialNumber(int DeviceSerialNumber) throws PhidgetException;
	public native java.lang.String getDeviceSKU() throws PhidgetException;
	public native int getDeviceVersion() throws PhidgetException;
	public native Phidget getHub() throws PhidgetException;
	public native int getHubPort() throws PhidgetException;
	public native void setHubPort(int HubPort) throws PhidgetException;
	public native int getHubPortCount() throws PhidgetException;
	public native boolean getIsChannel() throws PhidgetException;
	public native boolean getIsHubPortDevice() throws PhidgetException;
	public native void setIsHubPortDevice(boolean IsHubPortDevice) throws PhidgetException;
	public native boolean getIsLocal() throws PhidgetException;
	public native void setIsLocal(boolean IsLocal) throws PhidgetException;
	public native boolean getIsRemote() throws PhidgetException;
	public native void setIsRemote(boolean IsRemote) throws PhidgetException;
	public native void open() throws PhidgetException;
	public native void open(int timeout) throws PhidgetException;
	public native Phidget getParent() throws PhidgetException;
	public native java.lang.String getServerHostname() throws PhidgetException;
	public native java.lang.String getServerName() throws PhidgetException;
	public native void setServerName(java.lang.String ServerName) throws PhidgetException;
	public native java.lang.String getServerPeerName() throws PhidgetException;
	public native void writeDeviceLabel(java.lang.String deviceLabel) throws PhidgetException;

	public static final int ANY_SERIAL_NUMBER = -1;

	public static final int ANY_HUB_PORT = -1;

	public static final int ANY_CHANNEL = -1;

	public static final java.lang.String ANY_LABEL = null;

	public static final int INFINITE_TIMEOUT = 0;

	public static final int DEFAULT_TIMEOUT = 500;
}

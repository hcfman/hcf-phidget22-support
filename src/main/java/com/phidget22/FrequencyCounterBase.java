/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class FrequencyCounterBase extends Phidget {

	FrequencyCounterBase(long handle) {
		super(handle);
	}

	public FrequencyCounterBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableCountChangeEvents(enable && countChangeListeners.size() > 0);
		enableFrequencyChangeEvents(enable && frequencyChangeListeners.size() > 0);
	}

	public final void addCountChangeListener(FrequencyCounterCountChangeListener l) {
		synchronized(countChangeListeners) {
			countChangeListeners.add(l);
			enableCountChangeEvents(true);
		}
	}
	private List<FrequencyCounterCountChangeListener> countChangeListeners = new ArrayList<FrequencyCounterCountChangeListener>();
	private long nativeCountChangeHandler = 0;
	public final void removeCountChangeListener(FrequencyCounterCountChangeListener l) {
		synchronized(countChangeListeners) {
			countChangeListeners.remove(l);
			enableCountChangeEvents(countChangeListeners.size() > 0);
		}
	}
	private void fireCountChange(FrequencyCounterCountChangeEvent e) {
		synchronized(countChangeListeners) {
			for (Iterator it = countChangeListeners.iterator (); it.hasNext();)
			((FrequencyCounterCountChangeListener) it.next ()).onCountChange (e);
		}
	}
	private native void enableCountChangeEvents(boolean b);

	public final void addFrequencyChangeListener(FrequencyCounterFrequencyChangeListener l) {
		synchronized(frequencyChangeListeners) {
			frequencyChangeListeners.add(l);
			enableFrequencyChangeEvents(true);
		}
	}
	private List<FrequencyCounterFrequencyChangeListener> frequencyChangeListeners = new ArrayList<FrequencyCounterFrequencyChangeListener>();
	private long nativeFrequencyChangeHandler = 0;
	public final void removeFrequencyChangeListener(FrequencyCounterFrequencyChangeListener l) {
		synchronized(frequencyChangeListeners) {
			frequencyChangeListeners.remove(l);
			enableFrequencyChangeEvents(frequencyChangeListeners.size() > 0);
		}
	}
	private void fireFrequencyChange(FrequencyCounterFrequencyChangeEvent e) {
		synchronized(frequencyChangeListeners) {
			for (Iterator it = frequencyChangeListeners.iterator (); it.hasNext();)
			((FrequencyCounterFrequencyChangeListener) it.next ()).onFrequencyChange (e);
		}
	}
	private native void enableFrequencyChangeEvents(boolean b);


	public native long getCount() throws PhidgetException;
	public native boolean getEnabled() throws PhidgetException;
	public native void setEnabled(boolean Enabled) throws PhidgetException;
	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native FrequencyFilterType getFilterType() throws PhidgetException;
	public native void setFilterType(FrequencyFilterType FilterType) throws PhidgetException;
	public native double getFrequency() throws PhidgetException;
	public native double getMaxFrequency() throws PhidgetException;
	public native double getFrequencyCutoff() throws PhidgetException;
	public native void setFrequencyCutoff(double FrequencyCutoff) throws PhidgetException;
	public native double getMinFrequencyCutoff() throws PhidgetException;
	public native double getMaxFrequencyCutoff() throws PhidgetException;
	public native InputMode getInputMode() throws PhidgetException;
	public native void setInputMode(InputMode InputMode) throws PhidgetException;
	public native PowerSupply getPowerSupply() throws PhidgetException;
	public native void setPowerSupply(PowerSupply PowerSupply) throws PhidgetException;
	public native void reset() throws PhidgetException;
	public native double getTimeElapsed() throws PhidgetException;
}

/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class DCMotorBase extends Phidget {

	DCMotorBase(long handle) {
		super(handle);
	}

	public DCMotorBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableBackEMFChangeEvents(enable && backEMFChangeListeners.size() > 0);
		enableBrakingStrengthChangeEvents(enable && brakingStrengthChangeListeners.size() > 0);
		enableVelocityUpdateEvents(enable && velocityUpdateListeners.size() > 0);
	}

	public final void addBackEMFChangeListener(DCMotorBackEMFChangeListener l) {
		synchronized(backEMFChangeListeners) {
			backEMFChangeListeners.add(l);
			enableBackEMFChangeEvents(true);
		}
	}
	private List<DCMotorBackEMFChangeListener> backEMFChangeListeners = new ArrayList<DCMotorBackEMFChangeListener>();
	private long nativeBackEMFChangeHandler = 0;
	public final void removeBackEMFChangeListener(DCMotorBackEMFChangeListener l) {
		synchronized(backEMFChangeListeners) {
			backEMFChangeListeners.remove(l);
			enableBackEMFChangeEvents(backEMFChangeListeners.size() > 0);
		}
	}
	private void fireBackEMFChange(DCMotorBackEMFChangeEvent e) {
		synchronized(backEMFChangeListeners) {
			for (Iterator it = backEMFChangeListeners.iterator (); it.hasNext();)
			((DCMotorBackEMFChangeListener) it.next ()).onBackEMFChange (e);
		}
	}
	private native void enableBackEMFChangeEvents(boolean b);

	public final void addBrakingStrengthChangeListener(DCMotorBrakingStrengthChangeListener l) {
		synchronized(brakingStrengthChangeListeners) {
			brakingStrengthChangeListeners.add(l);
			enableBrakingStrengthChangeEvents(true);
		}
	}
	private List<DCMotorBrakingStrengthChangeListener> brakingStrengthChangeListeners = new ArrayList<DCMotorBrakingStrengthChangeListener>();
	private long nativeBrakingStrengthChangeHandler = 0;
	public final void removeBrakingStrengthChangeListener(DCMotorBrakingStrengthChangeListener l) {
		synchronized(brakingStrengthChangeListeners) {
			brakingStrengthChangeListeners.remove(l);
			enableBrakingStrengthChangeEvents(brakingStrengthChangeListeners.size() > 0);
		}
	}
	private void fireBrakingStrengthChange(DCMotorBrakingStrengthChangeEvent e) {
		synchronized(brakingStrengthChangeListeners) {
			for (Iterator it = brakingStrengthChangeListeners.iterator (); it.hasNext();)
			((DCMotorBrakingStrengthChangeListener) it.next ()).onBrakingStrengthChange (e);
		}
	}
	private native void enableBrakingStrengthChangeEvents(boolean b);

	public final void addVelocityUpdateListener(DCMotorVelocityUpdateListener l) {
		synchronized(velocityUpdateListeners) {
			velocityUpdateListeners.add(l);
			enableVelocityUpdateEvents(true);
		}
	}
	private List<DCMotorVelocityUpdateListener> velocityUpdateListeners = new ArrayList<DCMotorVelocityUpdateListener>();
	private long nativeVelocityUpdateHandler = 0;
	public final void removeVelocityUpdateListener(DCMotorVelocityUpdateListener l) {
		synchronized(velocityUpdateListeners) {
			velocityUpdateListeners.remove(l);
			enableVelocityUpdateEvents(velocityUpdateListeners.size() > 0);
		}
	}
	private void fireVelocityUpdate(DCMotorVelocityUpdateEvent e) {
		synchronized(velocityUpdateListeners) {
			for (Iterator it = velocityUpdateListeners.iterator (); it.hasNext();)
			((DCMotorVelocityUpdateListener) it.next ()).onVelocityUpdate (e);
		}
	}
	private native void enableVelocityUpdateEvents(boolean b);


	public native double getAcceleration() throws PhidgetException;
	public native void setAcceleration(double Acceleration) throws PhidgetException;
	public native double getMinAcceleration() throws PhidgetException;
	public native double getMaxAcceleration() throws PhidgetException;
	public native double getBackEMF() throws PhidgetException;
	public native boolean getBackEMFSensingState() throws PhidgetException;
	public native void setBackEMFSensingState(boolean BackEMFSensingState) throws PhidgetException;
	public native double getBrakingStrength() throws PhidgetException;
	public native double getMinBrakingStrength() throws PhidgetException;
	public native double getMaxBrakingStrength() throws PhidgetException;
	public native double getCurrentLimit() throws PhidgetException;
	public native void setCurrentLimit(double CurrentLimit) throws PhidgetException;
	public native double getMinCurrentLimit() throws PhidgetException;
	public native double getMaxCurrentLimit() throws PhidgetException;
	public native double getCurrentRegulatorGain() throws PhidgetException;
	public native void setCurrentRegulatorGain(double CurrentRegulatorGain) throws PhidgetException;
	public native double getMinCurrentRegulatorGain() throws PhidgetException;
	public native double getMaxCurrentRegulatorGain() throws PhidgetException;
	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native FanMode getFanMode() throws PhidgetException;
	public native void setFanMode(FanMode FanMode) throws PhidgetException;
	public native double getTargetBrakingStrength() throws PhidgetException;
	public native void setTargetBrakingStrength(double TargetBrakingStrength) throws PhidgetException;
	public native double getTargetVelocity() throws PhidgetException;
	public native void setTargetVelocity(double TargetVelocity) throws PhidgetException;
	public native double getVelocity() throws PhidgetException;
	public native double getMinVelocity() throws PhidgetException;
	public native double getMaxVelocity() throws PhidgetException;
}

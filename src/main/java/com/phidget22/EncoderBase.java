/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class EncoderBase extends Phidget {

	EncoderBase(long handle) {
		super(handle);
	}

	public EncoderBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enablePositionChangeEvents(enable && positionChangeListeners.size() > 0);
	}

	public final void addPositionChangeListener(EncoderPositionChangeListener l) {
		synchronized(positionChangeListeners) {
			positionChangeListeners.add(l);
			enablePositionChangeEvents(true);
		}
	}
	private List<EncoderPositionChangeListener> positionChangeListeners = new ArrayList<EncoderPositionChangeListener>();
	private long nativePositionChangeHandler = 0;
	public final void removePositionChangeListener(EncoderPositionChangeListener l) {
		synchronized(positionChangeListeners) {
			positionChangeListeners.remove(l);
			enablePositionChangeEvents(positionChangeListeners.size() > 0);
		}
	}
	private void firePositionChange(EncoderPositionChangeEvent e) {
		synchronized(positionChangeListeners) {
			for (Iterator it = positionChangeListeners.iterator (); it.hasNext();)
			((EncoderPositionChangeListener) it.next ()).onPositionChange (e);
		}
	}
	private native void enablePositionChangeEvents(boolean b);


	public native void setEnabled(boolean Enabled) throws PhidgetException;
	public native boolean getEnabled() throws PhidgetException;
	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native long getIndexPosition() throws PhidgetException;
	public native EncoderIOMode getIOMode() throws PhidgetException;
	public native void setIOMode(EncoderIOMode IOMode) throws PhidgetException;
	public native long getPosition() throws PhidgetException;
	public native void setPosition(long Position) throws PhidgetException;
	public native int getPositionChangeTrigger() throws PhidgetException;
	public native void setPositionChangeTrigger(int PositionChangeTrigger) throws PhidgetException;
	public native int getMinPositionChangeTrigger() throws PhidgetException;
	public native int getMaxPositionChangeTrigger() throws PhidgetException;
}

/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class BLDCMotorBase extends Phidget {

	BLDCMotorBase(long handle) {
		super(handle);
	}

	public BLDCMotorBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableBrakingStrengthChangeEvents(enable && brakingStrengthChangeListeners.size() > 0);
		enablePositionChangeEvents(enable && positionChangeListeners.size() > 0);
		enableVelocityUpdateEvents(enable && velocityUpdateListeners.size() > 0);
	}

	public final void addBrakingStrengthChangeListener(BLDCMotorBrakingStrengthChangeListener l) {
		synchronized(brakingStrengthChangeListeners) {
			brakingStrengthChangeListeners.add(l);
			enableBrakingStrengthChangeEvents(true);
		}
	}
	private List<BLDCMotorBrakingStrengthChangeListener> brakingStrengthChangeListeners = new ArrayList<BLDCMotorBrakingStrengthChangeListener>();
	private long nativeBrakingStrengthChangeHandler = 0;
	public final void removeBrakingStrengthChangeListener(BLDCMotorBrakingStrengthChangeListener l) {
		synchronized(brakingStrengthChangeListeners) {
			brakingStrengthChangeListeners.remove(l);
			enableBrakingStrengthChangeEvents(brakingStrengthChangeListeners.size() > 0);
		}
	}
	private void fireBrakingStrengthChange(BLDCMotorBrakingStrengthChangeEvent e) {
		synchronized(brakingStrengthChangeListeners) {
			for (Iterator it = brakingStrengthChangeListeners.iterator (); it.hasNext();)
			((BLDCMotorBrakingStrengthChangeListener) it.next ()).onBrakingStrengthChange (e);
		}
	}
	private native void enableBrakingStrengthChangeEvents(boolean b);

	public final void addPositionChangeListener(BLDCMotorPositionChangeListener l) {
		synchronized(positionChangeListeners) {
			positionChangeListeners.add(l);
			enablePositionChangeEvents(true);
		}
	}
	private List<BLDCMotorPositionChangeListener> positionChangeListeners = new ArrayList<BLDCMotorPositionChangeListener>();
	private long nativePositionChangeHandler = 0;
	public final void removePositionChangeListener(BLDCMotorPositionChangeListener l) {
		synchronized(positionChangeListeners) {
			positionChangeListeners.remove(l);
			enablePositionChangeEvents(positionChangeListeners.size() > 0);
		}
	}
	private void firePositionChange(BLDCMotorPositionChangeEvent e) {
		synchronized(positionChangeListeners) {
			for (Iterator it = positionChangeListeners.iterator (); it.hasNext();)
			((BLDCMotorPositionChangeListener) it.next ()).onPositionChange (e);
		}
	}
	private native void enablePositionChangeEvents(boolean b);

	public final void addVelocityUpdateListener(BLDCMotorVelocityUpdateListener l) {
		synchronized(velocityUpdateListeners) {
			velocityUpdateListeners.add(l);
			enableVelocityUpdateEvents(true);
		}
	}
	private List<BLDCMotorVelocityUpdateListener> velocityUpdateListeners = new ArrayList<BLDCMotorVelocityUpdateListener>();
	private long nativeVelocityUpdateHandler = 0;
	public final void removeVelocityUpdateListener(BLDCMotorVelocityUpdateListener l) {
		synchronized(velocityUpdateListeners) {
			velocityUpdateListeners.remove(l);
			enableVelocityUpdateEvents(velocityUpdateListeners.size() > 0);
		}
	}
	private void fireVelocityUpdate(BLDCMotorVelocityUpdateEvent e) {
		synchronized(velocityUpdateListeners) {
			for (Iterator it = velocityUpdateListeners.iterator (); it.hasNext();)
			((BLDCMotorVelocityUpdateListener) it.next ()).onVelocityUpdate (e);
		}
	}
	private native void enableVelocityUpdateEvents(boolean b);


	public native double getAcceleration() throws PhidgetException;
	public native void setAcceleration(double Acceleration) throws PhidgetException;
	public native double getMinAcceleration() throws PhidgetException;
	public native double getMaxAcceleration() throws PhidgetException;
	public native double getBrakingStrength() throws PhidgetException;
	public native double getMinBrakingStrength() throws PhidgetException;
	public native double getMaxBrakingStrength() throws PhidgetException;
	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native double getPosition() throws PhidgetException;
	public native double getMinPosition() throws PhidgetException;
	public native double getMaxPosition() throws PhidgetException;
	public native void addPositionOffset(double positionOffset) throws PhidgetException;
	public native double getRescaleFactor() throws PhidgetException;
	public native void setRescaleFactor(double RescaleFactor) throws PhidgetException;
	public native double getStallVelocity() throws PhidgetException;
	public native void setStallVelocity(double StallVelocity) throws PhidgetException;
	public native double getMinStallVelocity() throws PhidgetException;
	public native double getMaxStallVelocity() throws PhidgetException;
	public native double getTargetBrakingStrength() throws PhidgetException;
	public native void setTargetBrakingStrength(double TargetBrakingStrength) throws PhidgetException;
	public native double getTargetVelocity() throws PhidgetException;
	public native void setTargetVelocity(double TargetVelocity) throws PhidgetException;
	public native double getVelocity() throws PhidgetException;
	public native double getMinVelocity() throws PhidgetException;
	public native double getMaxVelocity() throws PhidgetException;
}

/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;

public enum ErrorEventCode {
	BAD_VERSION(1) {
		public String getMessage() {
			return ("Client and Server protocol versions don't match.");
		}
	},
	BUSY(2) {
		public String getMessage() {
			return ("Phidget is in use.");
		}
	},
	NETWORK(3) {
		public String getMessage() {
			return ("Networking communication error.");
		}
	},
	DISPATCH(4) {
		public String getMessage() {
			return ("An error occured dispatching a command or event.");
		}
	},
	FAILURE(5) {
		public String getMessage() {
			return ("A general failure occured - see description for details.");
		}
	},
	SUCCESS(4096) {
		public String getMessage() {
			return ("An error state has cleared.");
		}
	},
	OVERRUN(4098) {
		public String getMessage() {
			return ("A sampling overrun happened in firmware.");
		}
	},
	PACKET_LOST(4099) {
		public String getMessage() {
			return ("One or more packets were lost.");
		}
	},
	WRAP_AROUND(4100) {
		public String getMessage() {
			return ("A variable has wrapped around.");
		}
	},
	OVER_TEMPERATURE(4101) {
		public String getMessage() {
			return ("Over-temperature condition detected.");
		}
	},
	OVER_CURRENT(4102) {
		public String getMessage() {
			return ("Over-current condition detected.");
		}
	},
	OUT_OF_RANGE(4103) {
		public String getMessage() {
			return ("Out of range condition detected.");
		}
	},
	BAD_POWER(4104) {
		public String getMessage() {
			return ("Power supply problem detected.");
		}
	},
	SATURATION(4105) {
		public String getMessage() {
			return ("Saturation condition detected.");
		}
	},
	OVER_VOLTAGE(4107) {
		public String getMessage() {
			return ("Over-voltage condition detected.");
		}
	},
	FAILSAFE_CONDITION(4108) {
		public String getMessage() {
			return ("Fail-safe condition detected.");
		}
	},
	VOLTAGE_ERROR(4109) {
		public String getMessage() {
			return ("Voltage error detected.");
		}
	},
	ENERGY_DUMP_CONDITION(4110) {
		public String getMessage() {
			return ("Energy dump condition detected.");
		}
	},
	MOTOR_STALL_CONDITION(4111) {
		public String getMessage() {
			return ("Motor stall detected.");
		}
	};

	public static ErrorEventCode getEnum(int code) {
		switch(code) {
		case 1:
			return BAD_VERSION;
		case 2:
			return BUSY;
		case 3:
			return NETWORK;
		case 4:
			return DISPATCH;
		case 5:
			return FAILURE;
		case 4096:
			return SUCCESS;
		case 4098:
			return OVERRUN;
		case 4099:
			return PACKET_LOST;
		case 4100:
			return WRAP_AROUND;
		case 4101:
			return OVER_TEMPERATURE;
		case 4102:
			return OVER_CURRENT;
		case 4103:
			return OUT_OF_RANGE;
		case 4104:
			return BAD_POWER;
		case 4105:
			return SATURATION;
		case 4107:
			return OVER_VOLTAGE;
		case 4108:
			return FAILSAFE_CONDITION;
		case 4109:
			return VOLTAGE_ERROR;
		case 4110:
			return ENERGY_DUMP_CONDITION;
		case 4111:
			return MOTOR_STALL_CONDITION;
		}
		return null;
	}

	private final int code;
	private ErrorEventCode(int code) {
		this.code = code;
	}

	public int getCode() {
		return (code);
	}

	public abstract String getMessage();
}

/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class RFIDBase extends Phidget {

	RFIDBase(long handle) {
		super(handle);
	}

	public RFIDBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableTagEvents(enable && tagListeners.size() > 0);
		enableTagLostEvents(enable && tagLostListeners.size() > 0);
	}

	public final void addTagListener(RFIDTagListener l) {
		synchronized(tagListeners) {
			tagListeners.add(l);
			enableTagEvents(true);
		}
	}
	private List<RFIDTagListener> tagListeners = new ArrayList<RFIDTagListener>();
	private long nativeTagHandler = 0;
	public final void removeTagListener(RFIDTagListener l) {
		synchronized(tagListeners) {
			tagListeners.remove(l);
			enableTagEvents(tagListeners.size() > 0);
		}
	}
	private void fireTag(RFIDTagEvent e) {
		synchronized(tagListeners) {
			for (Iterator it = tagListeners.iterator (); it.hasNext();)
			((RFIDTagListener) it.next ()).onTag (e);
		}
	}
	private native void enableTagEvents(boolean b);

	public final void addTagLostListener(RFIDTagLostListener l) {
		synchronized(tagLostListeners) {
			tagLostListeners.add(l);
			enableTagLostEvents(true);
		}
	}
	private List<RFIDTagLostListener> tagLostListeners = new ArrayList<RFIDTagLostListener>();
	private long nativeTagLostHandler = 0;
	public final void removeTagLostListener(RFIDTagLostListener l) {
		synchronized(tagLostListeners) {
			tagLostListeners.remove(l);
			enableTagLostEvents(tagLostListeners.size() > 0);
		}
	}
	private void fireTagLost(RFIDTagLostEvent e) {
		synchronized(tagLostListeners) {
			for (Iterator it = tagLostListeners.iterator (); it.hasNext();)
			((RFIDTagLostListener) it.next ()).onTagLost (e);
		}
	}
	private native void enableTagLostEvents(boolean b);


	public native boolean getAntennaEnabled() throws PhidgetException;
	public native void setAntennaEnabled(boolean AntennaEnabled) throws PhidgetException;
	public native RFIDTag getLastTag() throws PhidgetException;
	public native boolean getTagPresent() throws PhidgetException;
	public native void write(java.lang.String tagString, RFIDProtocol protocol, boolean lockTag) throws PhidgetException;
}

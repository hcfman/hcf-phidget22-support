/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class VoltageInputBase extends Phidget {

	VoltageInputBase(long handle) {
		super(handle);
	}

	public VoltageInputBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableSensorChangeEvents(enable && sensorChangeListeners.size() > 0);
		enableVoltageChangeEvents(enable && voltageChangeListeners.size() > 0);
	}

	public final void addSensorChangeListener(VoltageInputSensorChangeListener l) {
		synchronized(sensorChangeListeners) {
			sensorChangeListeners.add(l);
			enableSensorChangeEvents(true);
		}
	}
	private List<VoltageInputSensorChangeListener> sensorChangeListeners = new ArrayList<VoltageInputSensorChangeListener>();
	private long nativeSensorChangeHandler = 0;
	public final void removeSensorChangeListener(VoltageInputSensorChangeListener l) {
		synchronized(sensorChangeListeners) {
			sensorChangeListeners.remove(l);
			enableSensorChangeEvents(sensorChangeListeners.size() > 0);
		}
	}
	private void fireSensorChange(VoltageInputSensorChangeEvent e) {
		synchronized(sensorChangeListeners) {
			for (Iterator it = sensorChangeListeners.iterator (); it.hasNext();)
			((VoltageInputSensorChangeListener) it.next ()).onSensorChange (e);
		}
	}
	private native void enableSensorChangeEvents(boolean b);

	public final void addVoltageChangeListener(VoltageInputVoltageChangeListener l) {
		synchronized(voltageChangeListeners) {
			voltageChangeListeners.add(l);
			enableVoltageChangeEvents(true);
		}
	}
	private List<VoltageInputVoltageChangeListener> voltageChangeListeners = new ArrayList<VoltageInputVoltageChangeListener>();
	private long nativeVoltageChangeHandler = 0;
	public final void removeVoltageChangeListener(VoltageInputVoltageChangeListener l) {
		synchronized(voltageChangeListeners) {
			voltageChangeListeners.remove(l);
			enableVoltageChangeEvents(voltageChangeListeners.size() > 0);
		}
	}
	private void fireVoltageChange(VoltageInputVoltageChangeEvent e) {
		synchronized(voltageChangeListeners) {
			for (Iterator it = voltageChangeListeners.iterator (); it.hasNext();)
			((VoltageInputVoltageChangeListener) it.next ()).onVoltageChange (e);
		}
	}
	private native void enableVoltageChangeEvents(boolean b);


	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native PowerSupply getPowerSupply() throws PhidgetException;
	public native void setPowerSupply(PowerSupply PowerSupply) throws PhidgetException;
	public native VoltageSensorType getSensorType() throws PhidgetException;
	public native void setSensorType(VoltageSensorType SensorType) throws PhidgetException;
	public native UnitInfo getSensorUnit() throws PhidgetException;
	public native double getSensorValue() throws PhidgetException;
	public native double getSensorValueChangeTrigger() throws PhidgetException;
	public native void setSensorValueChangeTrigger(double SensorValueChangeTrigger) throws PhidgetException;
	public native double getVoltage() throws PhidgetException;
	public native double getMinVoltage() throws PhidgetException;
	public native double getMaxVoltage() throws PhidgetException;
	public native double getVoltageChangeTrigger() throws PhidgetException;
	public native void setVoltageChangeTrigger(double VoltageChangeTrigger) throws PhidgetException;
	public native double getMinVoltageChangeTrigger() throws PhidgetException;
	public native double getMaxVoltageChangeTrigger() throws PhidgetException;
	public native VoltageRange getVoltageRange() throws PhidgetException;
	public native void setVoltageRange(VoltageRange VoltageRange) throws PhidgetException;
}

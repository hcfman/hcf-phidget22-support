/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class VoltageRatioInputBase extends Phidget {

	VoltageRatioInputBase(long handle) {
		super(handle);
	}

	public VoltageRatioInputBase() throws PhidgetException {
		super(create());
	}

	private native static long create() throws PhidgetException;

	private final void setDeviceEvents(boolean enable) {
		enableSensorChangeEvents(enable && sensorChangeListeners.size() > 0);
		enableVoltageRatioChangeEvents(enable && voltageRatioChangeListeners.size() > 0);
	}

	public final void addSensorChangeListener(VoltageRatioInputSensorChangeListener l) {
		synchronized(sensorChangeListeners) {
			sensorChangeListeners.add(l);
			enableSensorChangeEvents(true);
		}
	}
	private List<VoltageRatioInputSensorChangeListener> sensorChangeListeners = new ArrayList<VoltageRatioInputSensorChangeListener>();
	private long nativeSensorChangeHandler = 0;
	public final void removeSensorChangeListener(VoltageRatioInputSensorChangeListener l) {
		synchronized(sensorChangeListeners) {
			sensorChangeListeners.remove(l);
			enableSensorChangeEvents(sensorChangeListeners.size() > 0);
		}
	}
	private void fireSensorChange(VoltageRatioInputSensorChangeEvent e) {
		synchronized(sensorChangeListeners) {
			for (Iterator it = sensorChangeListeners.iterator (); it.hasNext();)
			((VoltageRatioInputSensorChangeListener) it.next ()).onSensorChange (e);
		}
	}
	private native void enableSensorChangeEvents(boolean b);

	public final void addVoltageRatioChangeListener(VoltageRatioInputVoltageRatioChangeListener l) {
		synchronized(voltageRatioChangeListeners) {
			voltageRatioChangeListeners.add(l);
			enableVoltageRatioChangeEvents(true);
		}
	}
	private List<VoltageRatioInputVoltageRatioChangeListener> voltageRatioChangeListeners = new ArrayList<VoltageRatioInputVoltageRatioChangeListener>();
	private long nativeVoltageRatioChangeHandler = 0;
	public final void removeVoltageRatioChangeListener(VoltageRatioInputVoltageRatioChangeListener l) {
		synchronized(voltageRatioChangeListeners) {
			voltageRatioChangeListeners.remove(l);
			enableVoltageRatioChangeEvents(voltageRatioChangeListeners.size() > 0);
		}
	}
	private void fireVoltageRatioChange(VoltageRatioInputVoltageRatioChangeEvent e) {
		synchronized(voltageRatioChangeListeners) {
			for (Iterator it = voltageRatioChangeListeners.iterator (); it.hasNext();)
			((VoltageRatioInputVoltageRatioChangeListener) it.next ()).onVoltageRatioChange (e);
		}
	}
	private native void enableVoltageRatioChangeEvents(boolean b);


	public native boolean getBridgeEnabled() throws PhidgetException;
	public native void setBridgeEnabled(boolean BridgeEnabled) throws PhidgetException;
	public native BridgeGain getBridgeGain() throws PhidgetException;
	public native void setBridgeGain(BridgeGain BridgeGain) throws PhidgetException;
	public native int getDataInterval() throws PhidgetException;
	public native void setDataInterval(int DataInterval) throws PhidgetException;
	public native int getMinDataInterval() throws PhidgetException;
	public native int getMaxDataInterval() throws PhidgetException;
	public native VoltageRatioSensorType getSensorType() throws PhidgetException;
	public native void setSensorType(VoltageRatioSensorType SensorType) throws PhidgetException;
	public native UnitInfo getSensorUnit() throws PhidgetException;
	public native double getSensorValue() throws PhidgetException;
	public native double getSensorValueChangeTrigger() throws PhidgetException;
	public native void setSensorValueChangeTrigger(double SensorValueChangeTrigger) throws PhidgetException;
	public native double getVoltageRatio() throws PhidgetException;
	public native double getMinVoltageRatio() throws PhidgetException;
	public native double getMaxVoltageRatio() throws PhidgetException;
	public native double getVoltageRatioChangeTrigger() throws PhidgetException;
	public native void setVoltageRatioChangeTrigger(double VoltageRatioChangeTrigger) throws PhidgetException;
	public native double getMinVoltageRatioChangeTrigger() throws PhidgetException;
	public native double getMaxVoltageRatioChangeTrigger() throws PhidgetException;
}

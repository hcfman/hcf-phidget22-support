/* DO NOT EDIT THIS FILE - it is machine generated */

/*
 * This file is part of Phidget22.jar
 *
 * Copyright 2017 Phidgets Inc <patrick@phidgets.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, see
 * <http://www.gnu.org/licenses/>
 */

package com.phidget22;
import java.util.*;

public class LogBase {
	static {
		try {
			System.loadLibrary("phidget22java");
		} catch (UnsatisfiedLinkError ex) {
			String os = System.getProperty("os.name");
			if (os.startsWith("Linux")) {
				throw new ExceptionInInitializerError(ex.getMessage()
				+ "\nCould not locate the Phidget C library (libphidget22java.so)."
				+ "\nMake sure it is installed, and add it' s path to LD_LIBRARY_PATH.");
			}
			else if (os.startsWith("Windows")) {
				throw new ExceptionInInitializerError(ex.getMessage()
				+ "\nCould not locate the Phidget C library."
				+ "\nThe Windows Phidget22 MSI must be installed.");
			}
			else if (os.startsWith("Mac")) {
				throw new ExceptionInInitializerError(ex.getMessage()
				+ "\nCould not locate the Phidget C library."
				+ "\nThe Mac Phidget22 DMG must be installed.");
			}
			else {
				throw new ExceptionInInitializerError(ex.getMessage()
				+ "\nCould not locate the Phidget C library.");
			}
		}
	}

	public LogBase() throws PhidgetException { }


	private final void setEvents(boolean enable) {
	}


	public static native void disable() throws PhidgetException;
	public static native void enable(LogLevel level, java.lang.String destination) throws PhidgetException;
	public static native LogLevel getLevel() throws PhidgetException;
	public static native void setLevel(LogLevel level) throws PhidgetException;
	public static native void log(LogLevel level, java.lang.String source, java.lang.String message) throws PhidgetException;
	public static native void log(LogLevel level, java.lang.String message) throws PhidgetException;
	public static native void rotate() throws PhidgetException;
	public static native boolean isRotating() throws PhidgetException;
	public static native LogRotating getRotating() throws PhidgetException;
	public static native void setRotating(long size, int keepCount) throws PhidgetException;
	public static native void enableRotating() throws PhidgetException;
	public static native void disableRotating() throws PhidgetException;
	public static native void addSource(java.lang.String source, LogLevel level) throws PhidgetException;
	public static native LogLevel getSourceLevel(java.lang.String source) throws PhidgetException;
	public static native void setSourceLevel(java.lang.String source, LogLevel level) throws PhidgetException;
}
